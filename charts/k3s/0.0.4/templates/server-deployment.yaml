apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "server.name" . }}
  labels:
    {{ template "server.name" . }}: "true"
    {{ if .Values.server.enableAgent -}}{{ template "agent.name" . }}: "true"{{- end }}
    "app.kubernetes.io/name": '{{ template "server.name" .}}'
spec:
  replicas: {{ .Values.server.replicaCount }}
  selector:
    matchLabels:
      "app.kubernetes.io/name": '{{ template "server.name" .}}'
  strategy:
    type: {{ if .Values.server.persistence.enabled }}Recreate{{ else }}RollingUpdate
    rollingUpdate:
{{ toYaml .Values.server.rollingUpdate | indent 6 }}
    {{- end }}
  template:
    metadata:
      labels:
        {{ template "server.name" . }}: "true"
        {{ if .Values.server.enableAgent -}}{{ template "agent.name" . }}: "true"{{- end }}
        "app.kubernetes.io/name": '{{ template "server.name" .}}'
    spec:
      containers:
        - args:
          - server
          {{ if .Values.server.clusterCidr -}}- --cluster-cidr={{ .Values.server.clusterCidr }}{{- end }}
          {{ if .Values.server.serviceCidr -}}- --service-cidr={{ .Values.server.serviceCidr }}{{- end }}
          {{ if .Values.server.clusterDns -}}- --cluster-dns={{ .Values.server.clusterDns }}{{- end }}
          {{ if not .Values.server.enableAgent -}}- --disable-agent{{- end }}
          {{ if not .Values.server.enableTraefik }}
          - --no-deploy
          - traefik
          {{- end }}
          env:
          - name: K3S_CLUSTER_SECRET
            value: {{ .Values.k3sClusterSecret }}
          - name: K3S_KUBECONFIG_MODE
            value: "{{ .Values.server.k3sKubeconfigMode }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: k3s-server
          ports:
          - containerPort: 6443
            name: k3sserver
            protocol: TCP
          {{- if .Values.server.enableAgent }}
          - containerPort: 443
            name: tcp443
            protocol: TCP
          - containerPort: 80
            name: tcp80
            protocol: TCP
          {{- end }}
          resources: {}
          {{- if .Values.server.enableAgent }}
          securityContext:
            privileged: true
          {{- end }}
          volumeMounts:
          - mountPath: /var/lib/rancher/k3s
            name: k3s-data
          {{- if .Values.server.manifests -}}
          {{ template "server.manifestnames" . }}
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}

      volumes:
      - name: k3s-data
        {{- if .Values.server.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.server.persistence.existingClaim | default (include "server.fullname" .) }}
        {{- else }}
        emptyDir: {}
        {{- end -}}
      {{- if .Values.server.manifests }}
      - name: manifests
        configMap:
          name: {{ template "server.fullname" . }}-manifests
      {{ end }}
