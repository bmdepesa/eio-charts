image:
  repository: rancher/k3s
  tag: v0.5.0
  pullPolicy: IfNotPresent

server:
  name: k3s-master
  replicaCount: 1
  enableAgent: true
  enableTraefik: true
  clusterCidr: 192.168.0.0/16
  serviceCidr: 192.169.0.0/16
  clusterDns: 192.169.0.10
  k3sKubeconfigMode: 666
  # Ignored if persistence is enabled
  rollingUpdate: {}
  persistence:
    enabled: true
    annotations: {}
    accessMode: ReadWriteOnce
    size: 8Gi

    # Set this if you have an existing claim to use, otherwise we will create one.
    # existingClaim: PVC_NAME

    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    # set, choosing the default provisioner.
    storageClass:

  # Manifests should be formatted as configmap data entries:
  # manifests:
  #     nginx-ns.yaml: |-
  #       apiVersion: v1
  #       kind: Namespace
  #       metadata:
  #         name: ingress-nginx
  #     nginx-conf.yaml: |-
  #       kind: ConfigMap
  #       apiVersion: v1
  #       metadata:
  #         name: nginx-configuration
  #         namespace: ingress-nginx
  #         labels:
  #           app: ingress-nginx
  #     nginx-tcp.yaml: |-
  #       kind: ConfigMap
  #       apiVersion: v1
  #       metadata:
  #         name: tcp-services
  #         namespace: ingress-nginx
  #     nginx-udp.yaml: |-
  #       kind: ConfigMap
  #       apiVersion: v1
  #       metadata:
  #         name: udp-services
  #         namespace: ingress-nginx
  #     nginx-sa.yaml: |-
  #       apiVersion: v1
  #       kind: ServiceAccount
  #       metadata:
  #         name: nginx-ingress-serviceaccount
  #         namespace: ingress-nginx
  #     nginx-rbac.yaml: |-
  #       apiVersion: rbac.authorization.k8s.io/v1beta1
  #       kind: ClusterRole
  #       metadata:
  #         name: nginx-ingress-clusterrole
  #       rules:
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - configmaps
  #             - endpoints
  #             - nodes
  #             - pods
  #             - secrets
  #           verbs:
  #             - list
  #             - watch
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - nodes
  #           verbs:
  #             - get
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - services
  #           verbs:
  #             - get
  #             - list
  #             - watch
  #         - apiGroups:
  #             - "extensions"
  #           resources:
  #             - ingresses
  #             - daemonsets
  #           verbs:
  #             - get
  #             - list
  #             - watch
  #         - apiGroups:
  #             - ""
  #           resources:
  #               - events
  #           verbs:
  #               - create
  #               - patch
  #         - apiGroups:
  #             - "extensions"
  #           resources:
  #             - ingresses/status
  #           verbs:
  #             - update
  #     nginx-role.yaml: |-
  #       apiVersion: rbac.authorization.k8s.io/v1beta1
  #       kind: Role
  #       metadata:
  #         name: nginx-ingress-role
  #         namespace: ingress-nginx
  #       rules:
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - configmaps
  #             - pods
  #             - secrets
  #             - namespaces
  #           verbs:
  #             - get
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - configmaps
  #           resourceNames:
  #             # Defaults to "<election-id>-<ingress-class>"
  #             # Here: "<ingress-controller-leader>-<nginx>"
  #             # This has to be adapted if you change either parameter
  #             # when launching the nginx-ingress-controller.
  #             - "ingress-controller-leader-nginx"
  #           verbs:
  #             - get
  #             - update
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - configmaps
  #           verbs:
  #             - create
  #         - apiGroups:
  #             - ""
  #           resources:
  #             - endpoints
  #           verbs:
  #             - get
  #     nginx-rb.yaml: |-
  #       apiVersion: rbac.authorization.k8s.io/v1beta1
  #       kind: RoleBinding
  #       metadata:
  #         name: nginx-ingress-role-nisa-binding
  #         namespace: ingress-nginx
  #       roleRef:
  #         apiGroup: rbac.authorization.k8s.io
  #         kind: Role
  #         name: nginx-ingress-role
  #       subjects:
  #         - kind: ServiceAccount
  #           name: nginx-ingress-serviceaccount
  #           namespace: ingress-nginx
  #     nginx-crb.yaml: |-
  #       apiVersion: rbac.authorization.k8s.io/v1beta1
  #       kind: ClusterRoleBinding
  #       metadata:
  #         name: nginx-ingress-clusterrole-nisa-binding
  #       roleRef:
  #         apiGroup: rbac.authorization.k8s.io
  #         kind: ClusterRole
  #         name: nginx-ingress-clusterrole
  #       subjects:
  #         - kind: ServiceAccount
  #           name: nginx-ingress-serviceaccount
  #           namespace: ingress-nginx
  #     nginx-ds.yaml: |-
  #       apiVersion: extensions/v1beta1
  #       kind: DaemonSet
  #       metadata:
  #         name: nginx-ingress-controller
  #         namespace: ingress-nginx
  #       spec:
  #         selector:
  #           matchLabels:
  #             app: ingress-nginx
  #         template:
  #           metadata:
  #             labels:
  #               app: ingress-nginx
  #             annotations:
  #               prometheus.io/port: '10254'
  #               prometheus.io/scrape: 'true'
  #           spec:
  #             affinity:
  #               nodeAffinity:
  #                 requiredDuringSchedulingIgnoredDuringExecution:
  #                   nodeSelectorTerms:
  #                     - matchExpressions:
  #                       - key: beta.kubernetes.io/os
  #                         operator: NotIn
  #                         values:
  #                           - windows
  #             hostNetwork: true
  #             serviceAccountName: nginx-ingress-serviceaccount
  #             containers:
  #               - name: nginx-ingress-controller
  #                 image: rancher/nginx-ingress-controller:0.21.0-rancher3
  #                 args:
  #                   - /nginx-ingress-controller
  #                   - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
  #                   - --configmap=$(POD_NAMESPACE)/nginx-configuration
  #                   - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  #                   - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  #                   - --annotations-prefix=nginx.ingress.kubernetes.io
  #                 securityContext:
  #                   capabilities:
  #                       drop:
  #                       - ALL
  #                       add:
  #                       - NET_BIND_SERVICE
  #                   runAsUser: 33
  #                 env:
  #                   - name: POD_NAME
  #                     valueFrom:
  #                       fieldRef:
  #                         fieldPath: metadata.name
  #                   - name: POD_NAMESPACE
  #                     valueFrom:
  #                       fieldRef:
  #                         fieldPath: metadata.namespace
  #                 ports:
  #                 - name: http
  #                   containerPort: 80
  #                 - name: https
  #                   containerPort: 443
  #                 livenessProbe:
  #                   failureThreshold: 3
  #                   httpGet:
  #                     path: /healthz
  #                     port: 10254
  #                     scheme: HTTP
  #                   initialDelaySeconds: 10
  #                   periodSeconds: 10
  #                   successThreshold: 1
  #                   timeoutSeconds: 1
  #                 readinessProbe:
  #                   failureThreshold: 3
  #                   httpGet:
  #                     path: /healthz
  #                     port: 10254
  #                     scheme: HTTP
  #                   periodSeconds: 10
  #                   successThreshold: 1
  #                   timeoutSeconds: 1
  #     nginx-dep.yaml: |-
  #       apiVersion: extensions/v1beta1
  #       kind: Deployment
  #       metadata:
  #         name: default-http-backend
  #         labels:
  #           app: default-http-backend
  #         namespace: ingress-nginx
  #       spec:
  #         replicas: 1
  #         template:
  #           metadata:
  #             labels:
  #               app: default-http-backend
  #           spec:
  #             affinity:
  #               nodeAffinity:
  #                 requiredDuringSchedulingIgnoredDuringExecution:
  #                   nodeSelectorTerms:
  #                     - matchExpressions:
  #                       - key: beta.kubernetes.io/os
  #                         operator: NotIn
  #                         values:
  #                           - windows
  #             terminationGracePeriodSeconds: 60
  #             containers:
  #             - name: default-http-backend
  #               # Any image is permissable as long as:
  #               # 1. It serves a 404 page at /
  #               # 2. It serves 200 on a /healthz endpoint
  #               image: rancher/nginx-ingress-controller-defaultbackend:1.4-rancher1
  #               livenessProbe:
  #                 httpGet:
  #                   path: /healthz
  #                   port: 8080
  #                   scheme: HTTP
  #                 initialDelaySeconds: 30
  #                 timeoutSeconds: 5
  #               ports:
  #               - containerPort: 8080
  #               resources:
  #                 limits:
  #                   cpu: 10m
  #                   memory: 20Mi
  #                 requests:
  #                   cpu: 10m
  #                   memory: 20Mi
  #     nginx-svc.yaml: |-
  #       apiVersion: v1
  #       kind: Service
  #       metadata:
  #         name: default-http-backend
  #         namespace: ingress-nginx
  #         labels:
  #           app: default-http-backend
  #       spec:
  #         ports:
  #         - port: 80
  #           targetPort: 8080
  #         selector:
  #           app: default-http-backend
  #     rancher.yaml: |-
  #       apiVersion: k3s.cattle.io/v1
  #       kind: HelmChart
  #       metadata:
  #         name: rancher
  #         namespace: kube-system
  #       spec:
  #         chart: https://releases.rancher.com/server-charts/latest/rancher-2.2.3.tgz
  #         targetNamespace: cattle-system
  #         set:
  #           tls: external
  #           ingress.tls.source: secret
  manifests: {}

agent:
  replicaCount: 2
  ingress:
    enabled: true
    hostName: rancher-upgrade.int.rancher.io
    tls:
      enabled: true

k3sClusterSecret: somethingtotallyrandom
